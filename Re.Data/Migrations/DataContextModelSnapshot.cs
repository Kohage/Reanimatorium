// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Re.Data;

#nullable disable

namespace Re.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Re.Core.Models.ArteriaIndications", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("AllowControl")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowPiccoMonitoring")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowPressureMonitoring")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("ArteriaIndications");
                });

            modelBuilder.Entity("Re.Core.Models.CentralVeinIndications", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("AllowHemocorrection")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowInfusionTherapy")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowParenteralNutrition")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowVenoseAccess")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("CentralVeinIndications");
                });

            modelBuilder.Entity("Re.Core.Models.Doctor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("Re.Core.Models.Epicrisis.Transferable", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Abdomen")
                        .HasColumnType("text");

                    b.Property<string>("AgreedWith")
                        .HasColumnType("text");

                    b.Property<int[]>("ArtherialPressure")
                        .HasColumnType("integer[]");

                    b.Property<string>("Auscultatory")
                        .HasColumnType("text");

                    b.Property<string>("Breathing")
                        .HasColumnType("text");

                    b.Property<string>("ChiefId")
                        .HasColumnType("text");

                    b.Property<string>("Condition")
                        .HasColumnType("text");

                    b.Property<string>("Conscience")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Department")
                        .HasColumnType("text");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("text");

                    b.Property<string>("Diuresis")
                        .HasColumnType("text");

                    b.Property<string>("DoctorId")
                        .HasColumnType("text");

                    b.Property<string>("Drainage")
                        .HasColumnType("text");

                    b.Property<string>("DynamicsState")
                        .HasColumnType("text");

                    b.Property<string>("Hemodynamics")
                        .HasColumnType("text");

                    b.Property<string>("InflammationSigns")
                        .HasColumnType("text");

                    b.Property<string>("OngoingTherapy")
                        .HasColumnType("text");

                    b.Property<int>("Ps")
                        .HasColumnType("integer");

                    b.Property<string>("ReasonsHere")
                        .HasColumnType("text");

                    b.Property<string>("Recomended")
                        .HasColumnType("text");

                    b.Property<int>("RespiratoryRate")
                        .HasColumnType("integer");

                    b.Property<string[]>("SkinCovers")
                        .HasColumnType("text[]");

                    b.Property<int>("Temperature")
                        .HasColumnType("integer");

                    b.Property<string>("TransferCavacatheter")
                        .HasColumnType("text");

                    b.Property<string>("TransferEpiduralCavacatheter")
                        .HasColumnType("text");

                    b.Property<int>("VentricularReduce")
                        .HasColumnType("integer");

                    b.Property<string[]>("Wheezes")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("ChiefId");

                    b.HasIndex("DoctorId");

                    b.ToTable("TransferableEpicrisis");
                });

            modelBuilder.Entity("Re.Core.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ArtPresDown")
                        .HasColumnType("integer");

                    b.Property<int>("ArtPresUp")
                        .HasColumnType("integer");

                    b.Property<string>("FIO")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Peculiarity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Pulse")
                        .HasColumnType("integer");

                    b.Property<int>("SpO2")
                        .HasColumnType("integer");

                    b.Property<string>("VAS")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Re.Core.Models.ReceptionEpicrisis", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AVLDueTransportation")
                        .HasColumnType("text");

                    b.Property<string>("Abdomen")
                        .HasColumnType("text");

                    b.Property<string>("AbdomenText")
                        .HasColumnType("text");

                    b.Property<string>("Addition")
                        .HasColumnType("text");

                    b.Property<int[]>("ArtherialPressure")
                        .HasColumnType("integer[]");

                    b.Property<string>("Auscultatory")
                        .HasColumnType("text");

                    b.Property<int>("BR")
                        .HasColumnType("integer");

                    b.Property<string>("BreathingDisorder")
                        .HasColumnType("text");

                    b.Property<string[]>("BreathingRate")
                        .HasColumnType("text[]");

                    b.Property<string>("BreathingThrough")
                        .HasColumnType("text");

                    b.Property<string>("ComplaintText")
                        .HasColumnType("text");

                    b.Property<string>("Complaints")
                        .HasColumnType("text");

                    b.Property<string>("Condition")
                        .HasColumnType("text");

                    b.Property<string>("Conscience")
                        .HasColumnType("text");

                    b.Property<string>("Cyanosis")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeliveredFrom")
                        .HasColumnType("text");

                    b.Property<string>("Device")
                        .HasColumnType("text");

                    b.Property<string>("Distension")
                        .HasColumnType("text");

                    b.Property<string>("DistensionText")
                        .HasColumnType("text");

                    b.Property<double>("Diuresis")
                        .HasColumnType("double precision");

                    b.Property<string>("DoctorId")
                        .HasColumnType("text");

                    b.Property<string>("Drainage")
                        .HasColumnType("text");

                    b.Property<int>("FiO2")
                        .HasColumnType("integer");

                    b.Property<int>("HeartRate")
                        .HasColumnType("integer");

                    b.Property<string>("Hemodynamics")
                        .HasColumnType("text");

                    b.Property<string>("InflammationInCatheter")
                        .HasColumnType("text");

                    b.Property<string>("Inotropes")
                        .HasColumnType("text");

                    b.Property<string>("InotropesDescription")
                        .HasColumnType("text");

                    b.Property<string>("InotropesUnits")
                        .HasColumnType("text");

                    b.Property<int>("InotropesValue")
                        .HasColumnType("integer");

                    b.Property<string>("LaboratoryData")
                        .HasColumnType("text");

                    b.Property<string>("Marbling")
                        .HasColumnType("text");

                    b.Property<string>("Mode")
                        .HasColumnType("text");

                    b.Property<string>("MuscleTone")
                        .HasColumnType("text");

                    b.Property<string>("OxygenInsufflation")
                        .HasColumnType("text");

                    b.Property<int>("PEEP")
                        .HasColumnType("integer");

                    b.Property<string>("Pain")
                        .HasColumnType("text");

                    b.Property<string>("PainText")
                        .HasColumnType("text");

                    b.Property<string>("PeripheralEdema")
                        .HasColumnType("text");

                    b.Property<string>("Peristalsis")
                        .HasColumnType("text");

                    b.Property<int>("Pinsp")
                        .HasColumnType("integer");

                    b.Property<int>("Psupp")
                        .HasColumnType("integer");

                    b.Property<int>("Pulse")
                        .HasColumnType("integer");

                    b.Property<string>("PulseRhythm")
                        .HasColumnType("text");

                    b.Property<string>("Ramsey")
                        .HasColumnType("text");

                    b.Property<int>("RespiratoryRate")
                        .HasColumnType("integer");

                    b.Property<string>("RespiratorySupport")
                        .HasColumnType("text");

                    b.Property<string>("SeverityOfCondition")
                        .HasColumnType("text");

                    b.Property<string[]>("SkinCovers")
                        .HasColumnType("text[]");

                    b.Property<int>("SpO2")
                        .HasColumnType("integer");

                    b.Property<string>("SpontaneousBreathing")
                        .HasColumnType("text");

                    b.Property<int>("Till")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("interval");

                    b.Property<string[]>("Tongue")
                        .HasColumnType("text[]");

                    b.Property<string>("TreatmentPlan")
                        .HasColumnType("text");

                    b.Property<string>("Urine")
                        .HasColumnType("text");

                    b.Property<string>("VAS")
                        .HasColumnType("text");

                    b.Property<string[]>("VeinsToBeCatheterized")
                        .HasColumnType("text[]");

                    b.Property<int>("Volume")
                        .HasColumnType("integer");

                    b.Property<string[]>("Wheezes")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("ReceptionEpicrises");
                });

            modelBuilder.Entity("Re.Core.Models.SLRProtocol", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text");

                    b.Property<string>("CallTo")
                        .HasColumnType("text");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string[]>("DefibrillationInfo")
                        .HasColumnType("text[]");

                    b.Property<string>("DoctorId")
                        .HasColumnType("text");

                    b.Property<string>("EKGMonitor")
                        .HasColumnType("text");

                    b.Property<string>("Features")
                        .HasColumnType("text");

                    b.Property<string[]>("IntravenousCatheterInfo")
                        .HasColumnType("text[]");

                    b.Property<int>("PatientAge")
                        .HasColumnType("integer");

                    b.Property<string>("PatientName")
                        .HasColumnType("text");

                    b.Property<string>("PupilCondition")
                        .HasColumnType("text");

                    b.Property<string>("PupilType")
                        .HasColumnType("text");

                    b.Property<string>("ReanimationCancelReason")
                        .HasColumnType("text");

                    b.Property<string>("ReanimationFeatures")
                        .HasColumnType("text");

                    b.Property<string>("SpontaneousBreathing")
                        .HasColumnType("text");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone");

                    b.Property<int>("TrachealIntubationNo")
                        .HasColumnType("integer");

                    b.Property<int>("TrachealIntubationTry")
                        .HasColumnType("integer");

                    b.Property<string>("VentilationThrough")
                        .HasColumnType("text");

                    b.Property<string>("VentilationWith")
                        .HasColumnType("text");

                    b.Property<bool>("WasBaseSLRCarriedOut")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("SLRProtocols");
                });

            modelBuilder.Entity("Re.Core.Models.StandardProtocol", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("CatheterInsertedCentimetres")
                        .HasColumnType("integer");

                    b.Property<string>("CatheterUsed")
                        .HasColumnType("text");

                    b.Property<string[]>("CathetersUsed")
                        .HasColumnType("text[]");

                    b.Property<string>("Complications")
                        .HasColumnType("text");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DoctorId")
                        .HasColumnType("text");

                    b.Property<string>("Features")
                        .HasColumnType("text");

                    b.Property<bool>("IsLocalAnesthesyNeeded")
                        .HasColumnType("boolean");

                    b.Property<decimal>("LocalAnesthesyDose")
                        .HasColumnType("numeric");

                    b.Property<string>("LocalAnesthesyType")
                        .HasColumnType("text");

                    b.Property<string[]>("LocalAnesthesyTypes")
                        .HasColumnType("text[]");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone");

                    b.Property<int>("TriesNo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Protocols");

                    b.HasDiscriminator<string>("Discriminator").HasValue("StandardProtocol");
                });

            modelBuilder.Entity("Re.Core.Models.ArteriaProtocol", b =>
                {
                    b.HasBaseType("Re.Core.Models.StandardProtocol");

                    b.Property<string>("ArteriaToBeCatheterized")
                        .HasColumnType("text");

                    b.Property<string[]>("ArteriasToBeCatheterized")
                        .HasColumnType("text[]");

                    b.Property<string>("IndicationsId")
                        .HasColumnType("text")
                        .HasColumnName("ArteriaProtocol_IndicationsId");

                    b.HasIndex("IndicationsId");

                    b.HasDiscriminator().HasValue("ArteriaProtocol");
                });

            modelBuilder.Entity("Re.Core.Models.CentralVeinProtocol", b =>
                {
                    b.HasBaseType("Re.Core.Models.StandardProtocol");

                    b.Property<int>("CVD")
                        .HasColumnType("integer");

                    b.Property<string>("IndicationsId")
                        .HasColumnType("text");

                    b.Property<bool>("IsRgControlNeeded")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("RgControlDate")
                        .HasColumnType("date");

                    b.Property<string>("VeinToBeCatheterized")
                        .HasColumnType("text");

                    b.Property<string[]>("VeinsToBeCatheterized")
                        .HasColumnType("text[]");

                    b.HasIndex("IndicationsId");

                    b.HasDiscriminator().HasValue("CentralVeinProtocol");
                });

            modelBuilder.Entity("Re.Core.Models.Epicrisis.Transferable", b =>
                {
                    b.HasOne("Re.Core.Models.Doctor", "Chief")
                        .WithMany()
                        .HasForeignKey("ChiefId");

                    b.HasOne("Re.Core.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.Navigation("Chief");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Re.Core.Models.ReceptionEpicrisis", b =>
                {
                    b.HasOne("Re.Core.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Re.Core.Models.SLRProtocol", b =>
                {
                    b.HasOne("Re.Core.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Re.Core.Models.StandardProtocol", b =>
                {
                    b.HasOne("Re.Core.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Re.Core.Models.ArteriaProtocol", b =>
                {
                    b.HasOne("Re.Core.Models.ArteriaIndications", "Indications")
                        .WithMany()
                        .HasForeignKey("IndicationsId");

                    b.Navigation("Indications");
                });

            modelBuilder.Entity("Re.Core.Models.CentralVeinProtocol", b =>
                {
                    b.HasOne("Re.Core.Models.CentralVeinIndications", "Indications")
                        .WithMany()
                        .HasForeignKey("IndicationsId");

                    b.Navigation("Indications");
                });
#pragma warning restore 612, 618
        }
    }
}
