@page "/drugTable"

@using Re.Core.Models;
@using Re.UI.Pages.Components.Drug
@using Re.Services.Services
@using System.ComponentModel
@inject DrugService reService

<MudTabs Elevation="4" Rounded="true" Centered="true" Color="@Color.Primary" PanelClass="pa-6">
    
        <MudTabPanel Text="Пациент">
        @foreach (var res in PatientResult)
        {
            <MudCard Style="background-color: lightblue; border-radius: 15px; margin-bottom: 15px;" Elevation="3" Outlined="true" >
                <MudCardContent>
                    @foreach (var value in res)
                    {
                        <MudText><b>@value.Key:</b> @value.Value</MudText>
                    }
                </MudCardContent>
            </MudCard>
        }
        </MudTabPanel>
   <MudTabPanel Text="Синдром">
        @foreach (var res in SyndromResult)
        {
            <MudCard Style="background-color: lightblue; border-radius: 15px; margin-bottom: 15px;" Elevation="3" Outlined="true" >
                <MudCardContent>
                    @foreach (var value in res)
                    {
                        <MudText><b>@value.Key:</b> @value.Value</MudText>
                    }
                </MudCardContent>
            </MudCard>
        }
        </MudTabPanel>
        <MudTabPanel Text="Медикаменты">
        @foreach (var res in MedicationResult)
        {
            <MudCard Style="background-color: lightblue; border-radius: 15px; margin-bottom: 15px;" Elevation="3" Outlined="true" >
                <MudCardContent>
                    @foreach (var value in res)
                    {
                        <MudText><b>@value.Key:</b> @value.Value</MudText>
                    }
                </MudCardContent>
            </MudCard>
        }
        </MudTabPanel>
    
</MudTabs>


@code {
    private List<Patient> AllPatient = new List<Patient>();
    private List<Syndrom> AllSyndrom = new List<Syndrom>();
    private List<PrescribedMedication> AllMedication = new List<PrescribedMedication>();
    List<Dictionary<string, string>> PatientResult = new();
    List<Dictionary<string, string>> SyndromResult = new();
    List<Dictionary<string, string>> MedicationResult = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        AllPatient = await reService.GetAllPatientsAsync();
        AllSyndrom = await reService.GetAllSyndromAsync();
        AllMedication = await reService.GetAllMedicationAsync();
        GetPatientList();
        GetSyndromList();
        GetMedicationList();
    }

    private string FormatValue(object value)
    {
        string result = "";
        if (value is string[])
        {
            var array = value as Array;
            foreach (var arr in array)
            {
                result += $"{arr} ";
            }
            return result;
        }
        else if (value is int[])
        {
            var array = value as Array;
            foreach (var arr in array)
            {
                result += $"{arr} ";
            }
            return result;
        }
        else if (value is Doctor)
        {
            var doctor = value as Doctor;
            return doctor.Name;
        }
        else
        {
            return value?.ToString() ?? string.Empty;
        }
    }
     private void GetPatientList()
    {
        foreach (var item in AllPatient)
        {
            Dictionary<string, string> a = new();
            foreach (var prop in item.GetType().GetProperties())
            {
                var value = item.GetType().GetProperty(prop.Name).GetValue(item);
                var displayNameAttribute = (DisplayNameAttribute)Attribute.GetCustomAttribute(prop, typeof(DisplayNameAttribute));
                var displayName = displayNameAttribute?.DisplayName ?? prop.Name;

                if(value != null)
                {
                    var formatValue = FormatValue(value);
                    a.Add(displayName, formatValue);
                }
            }
            PatientResult.Add(a);
        }
    }
     private void GetSyndromList()
    {
        foreach (var item in AllSyndrom)
        {
            Dictionary<string, string> a = new();
            foreach (var prop in item.GetType().GetProperties())
            {
                var value = item.GetType().GetProperty(prop.Name).GetValue(item);
                var displayNameAttribute = (DisplayNameAttribute)Attribute.GetCustomAttribute(prop, typeof(DisplayNameAttribute));
                var displayName = displayNameAttribute?.DisplayName ?? prop.Name;

                if(value != null)
                {
                    var formatValue = FormatValue(value);
                    a.Add(displayName, formatValue);
                }
            }
            SyndromResult.Add(a);
        }
    }
    private void GetList()
    {
        foreach (var item in AllPatient)
        {
            Dictionary<string, string> a = new();
            foreach (var prop in item.GetType().GetProperties())
            {
                var value = item.GetType().GetProperty(prop.Name).GetValue(item);
                var displayNameAttribute = (DisplayNameAttribute)Attribute.GetCustomAttribute(prop, typeof(DisplayNameAttribute));
                var displayName = displayNameAttribute?.DisplayName ?? prop.Name;

                if(value != null)
                {
                    var formatValue = FormatValue(value);
                    a.Add(displayName, formatValue);
                }
            }
            PatientResult.Add(a);
        }
    }
    private void GetMedicationList()
    {
        foreach (var item in AllMedication)
        {
            Dictionary<string, string> a = new();
            foreach (var prop in item.GetType().GetProperties())
            {
                var value = item.GetType().GetProperty(prop.Name).GetValue(item);
                var displayNameAttribute = (DisplayNameAttribute)Attribute.GetCustomAttribute(prop, typeof(DisplayNameAttribute));
                var displayName = displayNameAttribute?.DisplayName ?? prop.Name;

                if(value != null)
                {
                    var formatValue = FormatValue(value);
                    a.Add(displayName, formatValue);
                }
            }
            MedicationResult.Add(a);
        }
    }
}