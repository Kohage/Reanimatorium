@page "/drugTable"

@using Re.Core.Models;
@using Re.UI.Pages.Components.Drug
@using Re.Services.Services
@inject DrugService reService

<MudTabs Elevation="4" Rounded="true" Centered="true" Color="@Color.Primary" PanelClass="pa-6">
    <MudTabPanel Text="Пациенты">
        <MudCard>
            <MudCardContent>
                @foreach (var value in PatientContext)
                {
                    <MudText>@value</MudText>
                }
            </MudCardContent>
        </MudCard>
        <MudTable Items="@dataPatientList">
            <HeaderContent>
                @foreach (var columnName in reService.GetPropertyPatientNames())
                {
                    <MudTh>@columnName</MudTh>
                }
            </HeaderContent>
            <RowTemplate>
                @foreach (var value in context)
                {
                    <MudTd>@value</MudTd>
                }
            </RowTemplate>
        </MudTable>
    </MudTabPanel>
   <MudTabPanel Text="Пациенты">
        <MudCard>
            <MudCardContent>
                @foreach (var value in SyndromContext)
                {
                    <MudText>@value</MudText>
                }
            </MudCardContent>
        </MudCard>
        <MudTable Items="@dataSyndromList">
            <HeaderContent>
                @foreach (var columnName in reService.GetPropertySyndromNames())
                {
                    <MudTh>@columnName</MudTh>
                }
            </HeaderContent>
            <RowTemplate>
                @foreach (var value in context)
                {
                    <MudTd>@value</MudTd>
                }
            </RowTemplate>
        </MudTable>
    </MudTabPanel>
    <MudTabPanel Text="Пациенты">
        <MudCard>
            <MudCardContent>
                @foreach (var value in MedicationContext)
                {
                    <MudText>@value</MudText>
                }
            </MudCardContent>
        </MudCard>
        <MudTable Items="@dataMedicationList">
            <HeaderContent>
                @foreach (var columnName in reService.GetPropertyMedicationNames())
                {
                    <MudTh>@columnName</MudTh>
                }
            </HeaderContent>
            <RowTemplate>
                @foreach (var value in context)
                {
                    <MudTd>@value</MudTd>
                }
            </RowTemplate>
        </MudTable>
    </MudTabPanel>
</MudTabs>


@code {
    private List<Patient> AllPatient = new List<Patient>();
    private List<Syndrom> AllSyndrom = new List<Syndrom>();
    private List<PrescribedMedication> AllMedication = new List<PrescribedMedication>();
    private List<List<string>> dataPatientList = new List<List<string>>();
    private List<List<string>> dataSyndromList = new List<List<string>>();
    private List<List<string>> dataMedicationList = new List<List<string>>();
    List<string> PatientContext = new();
    List<string> SyndromContext = new();
    List<string> MedicationContext = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        AllPatient = await reService.GetAllPatientsAsync();
        AllSyndrom = await reService.GetAllSyndromAsync();
        AllMedication = await reService.GetAllMedicationAsync();
        dataPatientList = GetPatientList();
        dataSyndromList = GetSyndromList();
        dataMedicationList = GetMedicationList();
        PatientContext = dataPatientList.FirstOrDefault() ?? new List<string>();
        SyndromContext = dataSyndromList.FirstOrDefault() ?? new List<string>();
        MedicationContext = dataMedicationList.FirstOrDefault() ?? new List<string>();
    }

    private string FormatValue(object value)
    {
        string result = "";
        if (value is string[])
        {
            var array = value as Array;
            foreach (var arr in array)
            {
                result += $"{arr} ";
            }
            return result;
        }
        else if (value is int[])
        {
            var array = value as Array;
            foreach (var arr in array)
            {
                result += $"{arr} ";
            }
            return result;
        }
        else if (value is Doctor)
        {
            var doctor = value as Doctor;
            return doctor.Name;
        }
        else
        {
            return value?.ToString() ?? string.Empty;
        }
    }
    private List<List<string>> GetPatientList()
    {
        var response = new List<List<string>>();
        foreach (var item in AllPatient)
        {
            var formatedData = new List<string>();
            foreach (var name in reService.GetPropertyPatientNames())
            {
                var value = item.GetType().GetProperty(name).GetValue(item);
                var formatValue = FormatValue(value);
                formatedData.Add(formatValue);
            }
            response.Add(formatedData);
        }
        return response;
    }
     private List<List<string>> GetSyndromList()
    {
        var response = new List<List<string>>();
        foreach (var item in AllSyndrom)
        {
            var formatedData = new List<string>();
            foreach (var name in reService.GetPropertySyndromNames())
            {
                var value = item.GetType().GetProperty(name).GetValue(item);
                var formatValue = FormatValue(value);
                formatedData.Add(formatValue);
            }
            response.Add(formatedData);
        }
        return response;
    }
     private List<List<string>> GetMedicationList()
    {
        var response = new List<List<string>>();
        foreach (var item in AllMedication)
        {
            var formatedData = new List<string>();
            foreach (var name in reService.GetPropertyMedicationNames())
            {
                var value = item.GetType().GetProperty(name).GetValue(item);
                var formatValue = FormatValue(value);
                formatedData.Add(formatValue);
            }
            response.Add(formatedData);
        }
        return response;
    }
}